task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    PUBLISH_GROUP_ID = 'com.telefonica'
    PUBLISH_ARTIFACT_ID = 'androidlogger'
    PUBLISH_VERSION = version

    PUBLISH_RELEASE_NAME = 'App Logger for Android'
    PUBLISH_NOOP_NAME = 'App Logger for Android NO-OP version'
    PUBLISH_DESCRIPTION = 'App Logger that allows app logs visualization, classification, filtering, sharing and recording from the application where it is included'
    PUBLISH_REPO_URL = 'https://github.com/Telefonica/android-logger'
}

ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
File secretPropsFile = project.rootProject.file('local.properties')

if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value -> ext[name] = value }
} else {
    println "File Not found"
}

publishing {
    publications {
        release(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            artifact("$buildDir/outputs/aar/${project.getName()}-enabled-release.aar")
            artifact androidSourcesJar

            pom {
                name = PUBLISH_RELEASE_NAME
                description = PUBLISH_DESCRIPTION
                url = PUBLISH_REPO_URL
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'dpastor'
                        name = 'David Pastor Herranz'
                        email = 'david.pastor.herranz@telefonica.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/Telefonica/android-logger.git'
                    developerConnection = 'scm:git:ssh://github.com/Telefonica/android-logger.git'
                    url = 'https://github.com/Telefonica/android-logger/tree/master'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.getByName("enabledImplementation").allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
        noop(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId "$PUBLISH_ARTIFACT_ID-no-op"
            version PUBLISH_VERSION

            artifact("$buildDir/outputs/aar/${project.getName()}-noop-release.aar")
            artifact androidSourcesJar

            pom {
                name = PUBLISH_NOOP_NAME
                description = PUBLISH_DESCRIPTION
                url = PUBLISH_REPO_URL
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'dpastor'
                        name = 'David Pastor Herranz'
                        email = 'david.pastor.herranz@telefonica.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/Telefonica/android-logger.git'
                    developerConnection = 'scm:git:ssh://github.com/Telefonica/android-logger.git'
                    url = 'https://github.com/Telefonica/android-logger/tree/master'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.getByName("noopImplementation").allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}
